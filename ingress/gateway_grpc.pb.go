// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: ingress/gateway.proto

package ingress

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IngressGatewayServiceClient is the client API for IngressGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngressGatewayServiceClient interface {
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
}

type ingressGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngressGatewayServiceClient(cc grpc.ClientConnInterface) IngressGatewayServiceClient {
	return &ingressGatewayServiceClient{cc}
}

func (c *ingressGatewayServiceClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	out := new(GetMessageResponse)
	err := c.cc.Invoke(ctx, "/ingress.gateway.IngressGatewayService/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngressGatewayServiceServer is the server API for IngressGatewayService service.
// All implementations must embed UnimplementedIngressGatewayServiceServer
// for forward compatibility
type IngressGatewayServiceServer interface {
	GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error)
	mustEmbedUnimplementedIngressGatewayServiceServer()
}

// UnimplementedIngressGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngressGatewayServiceServer struct {
}

func (UnimplementedIngressGatewayServiceServer) GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedIngressGatewayServiceServer) mustEmbedUnimplementedIngressGatewayServiceServer() {}

// UnsafeIngressGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngressGatewayServiceServer will
// result in compilation errors.
type UnsafeIngressGatewayServiceServer interface {
	mustEmbedUnimplementedIngressGatewayServiceServer()
}

func RegisterIngressGatewayServiceServer(s grpc.ServiceRegistrar, srv IngressGatewayServiceServer) {
	s.RegisterService(&IngressGatewayService_ServiceDesc, srv)
}

func _IngressGatewayService_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressGatewayServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingress.gateway.IngressGatewayService/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressGatewayServiceServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngressGatewayService_ServiceDesc is the grpc.ServiceDesc for IngressGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngressGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingress.gateway.IngressGatewayService",
	HandlerType: (*IngressGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessage",
			Handler:    _IngressGatewayService_GetMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ingress/gateway.proto",
}
